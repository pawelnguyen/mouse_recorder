(function(){
    var MouseRecorder = {};


    /**
     * MouseRecorder.Events
     */
    MouseRecorder.Events = {
        CLICK: 'click',
        MOVE: 'mousemove'
    },


    /**
     * MouseRecorder.Tracker
     */
    (function(namespace){

        var instance,
            mousePositionTrackInterval = 250,
        Tracker = function() {
            this.pusher = new MouseRecorder.Pusher();
            this.pusher.html();

            this.mouseCoords = {};
            this.initListeners();
            this.trackMousePosition();
        };
        Tracker.prototype = {
            initListeners: function() {
                MouseRecorder.Util.addEventListener(document, MouseRecorder.Events.CLICK, this.pusher.receive, this.pusher);
                MouseRecorder.Util.addEventListener(document, MouseRecorder.Events.MOVE, function(event) {
                    this.mouseCoords.pageX = event.pageX;
                    this.mouseCoords.pageY = event.pageY;
                    this.mouseCoords.moved = true;
                }, this);
            },
            trackMousePosition: function() {
                var self = this;
                setInterval(function() {
                    if(self.mouseCoords.moved === true) {
                        self.mouseCoords.moved = false;
                        self.pusher.receive(self.mouseCoords, MouseRecorder.Events.MOVE);
                    }
                }, mousePositionTrackInterval);
            }
        };

        namespace.Tracker = {
            instance: function() {
                if(!instance) {
                    instance = new Tracker();
                }
                return instance;
            }
        };
    })(MouseRecorder);


    /**
     * MouseRecorder.Pusher
     */
    (function(namespace) {

        var eventsPath = '<%= api_v1_events_path %>',
            htmlPath = '<%= api_v1_pageviews_path %>',
            host = '<%= "#{request.protocol}#{request.host_with_port}" %>',
            cookie = 'MouseRecorder_visitorKey',
            pushTimeout = 5000,
        Pusher = function(){
            this.url = MouseRecorder.Util.getUrl();
            this.userKey = '<%= params[:id] %>';
            this.visitorKey = this.getVisitorKey();
            this.pageviewKey = MouseRecorder.Util.getUID();
            this.events = [];
            this.pushTimer = undefined;
        };
        Pusher.prototype = {
            preflight: function() {
//                @TODO this.push(this.basicData(), preflightUrl);
            },
            html: function() {
                var data = this.basicData();
                var window_size = MouseRecorder.Util.getWindowSize();
                data.window_height = window_size.height;
                data.window_width = window_size.width;
                data.page_html = MouseRecorder.Util.getHTML();
                this.push(data, host + htmlPath);
            },
            receive: function(event, type) {
                var type = type || MouseRecorder.Events.CLICK,
                    push = (type == MouseRecorder.Events.CLICK);
                this.events.push({
                    x: event.pageX,
                    y: event.pageY,
                    timestamp: (new Date()).getTime(),
                    type: type
                });
                if(push) {
                    clearTimeout(this.pushTimer);
                    this.prePush();
                }
                else {
                    var self = this;
                    if(!this.pushTimer) {
                        this.pushTimer = setTimeout(function() {
                            clearTimeout(self.pushTimer);
                            self.pushTimer = undefined;
                            self.prePush();
                        }, pushTimeout);
                    }
                }
            },
            prePush: function() {
                var data = this.basicData();
                data.events = this.events;
                this.events = [];
                this.push(data, host + eventsPath);
            },
            push: function(data, url, callback) {
                var request = false,
                    self = this;
                if (window.ActiveXObject) {
                    var types = ['MSXML2.XmlHttp.5.0', 'MSXML2.XmlHttp.4.0', 'MSXML2.XmlHttp.3.0', 'MSXML2.XmlHttp.2.0', 'Microsoft.XmlHttp'];
                    for(var i in types) {
                        try {
                            request = new ActiveXObject(types[i]);
                            break;
                        } catch(e){}
                    }
                }
                else if (window.XMLHttpRequest) {
                    request = new XMLHttpRequest();
                }

                if(request) {
                    request.open('POST', url, true);
                    if(callback) {
                        request.onreadystatechange = function() {
                            if(this.status === 200 && this.readyState === 4) {
                                callback.apply(self, JSON.parse(this.responseText));
                            }
                        };
                    }
                    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                    request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                    if(request.readyState != 4) {
                        request.send(MouseRecorder.Util.toString(data));
                    }
                }
            },
            basicData: function() {
                return {
                    url: this.url,
                    user_key: this.userKey,
                    visitor_key: this.visitorKey,
                    pageview_key: this.pageviewKey
                };
            },
            getVisitorKey: function() {
                var visitorKeyCookie = MouseRecorder.CookieMonster.get(cookie);
                if(visitorKeyCookie === null || visitorKeyCookie === undefined || visitorKeyCookie.length === 0) {
                    visitorKeyCookie = MouseRecorder.Util.getUID();
                }
                MouseRecorder.CookieMonster.set(cookie, visitorKeyCookie, 60 * 60, '/')
                return visitorKeyCookie;
            }
        };

        namespace.Pusher = Pusher;
    })(MouseRecorder);


    /**
     * MouseRecorder.Util
     */
    (function(namespace) {
        namespace.Util = {
            addEventListener: function(el, event, callback, scope) {
                var _callback = function() {
                    callback.apply(scope, arguments);
                };
                if(el.addEventListener != undefined) {
                    el.addEventListener(event, _callback, false);
                }
                else if(el.attachEvent != undefined) {
                    el.attachEvent('on' + event, _callback);
                }
                else {
                    el['on' + event] = _callback;
                }
            },
            getUID: function() {
                return ((((1+Math.random())*0x10000)|0).toString(16) + (new Date().getTime()).toString(16)).substring(1);
            },
            getUrl: function() {
                return document.URL;
            },
            toString: function(obj, index) {
                var params = [];
                for(var i in obj) {
                    var key = (index == undefined) ? i : index + '[' + i + ']';
                    if(Array.isArray(obj[i])) {
                        params.push(this.toString(obj[i], key));
                    }
                    else if(typeof obj[i] === 'object') {
                        params.push(this.toString(obj[i], key));
                    }
                    else {
                        params.push(key + '=' + obj[i]);
                    }
                }
                return params.join('&');
            },
            getHTML: function() {
                var html = document.documentElement.outerHTML.replace(/\s+/g, ' ').replace(/\r?\n|\r/g, ' ').replace(
                    /<head>(.*)<\/head>/, '<base href="' + this.getUrlRoot() + '">' + document.getElementsByTagName('head')[0].innerHTML);
                return encodeURIComponent(html.replace(/\s+/g, ' ').replace(/\r?\n|\r/g, ' '))
            },
            getUrlRoot: function() {
              return this.getUrl().match(/(.*\/)/)[0];
            },
            getWindowSize: function() {
                return {width: window.innerWidth, height: window.innerHeight};
            }
        };
    })(MouseRecorder);


    /**
     * MouseRecorder.CookieMonster
     */
    (function(namespace){
        /*!
         * cookie-monster - a simple cookie library
         * v0.2.0
         * https://github.com/jgallen23/cookie-monster
         * copyright Greg Allen 2013
         * MIT License
         */
        var monster = {
            set: function(name, value, seconds, path) {
                var date = new Date(),
                        expires = '',
                        type = typeof(value),
                        valueToUse = '';
                path = path || "/";
                if (seconds) {
                    date.setTime(date.getTime() + seconds * 1000);
                    expires = "; expires=" + date.toUTCString();
                }
                if (type === "object"  && type !== "undefined") {
                    if(!("JSON" in window)) throw "Bummer, your browser doesn't support JSON parsing.";
                    valueToUse = JSON.stringify({v:value});
                } else {
                    valueToUse = encodeURIComponent(value);
                }

                document.cookie = name + "=" + valueToUse + expires + "; path=" + path;
            },
            get: function(name) {
                var nameEQ = name + "=",
                        ca = document.cookie.split(';'),
                        value = '',
                        firstChar = '',
                        parsed={};
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) === 0) {
                        value = c.substring(nameEQ.length, c.length);
                        firstChar = value.substring(0, 1);
                        if(firstChar=="{"){
                            parsed = JSON.parse(value);
                            if("v" in parsed) return parsed.v;
                        }
                        if (value=="undefined") return undefined;
                        return decodeURIComponent(value);
                    }
                }
                return null;
            },
            remove: function(name) {
                this.set(name, "", -1);
            }
        };

        namespace.CookieMonster = monster;
    })(MouseRecorder);


    MouseRecorder.Tracker.instance();
})();